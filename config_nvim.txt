local packer_bootstrap = false
-- Check if packer is installed
local install_path = vim.fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'
if vim.fn.empty(vim.fn.glob(install_path)) > 0 then
    vim.fn.system({'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path})
    packer_bootstrap = true
end
-- Load Packer
vim.cmd [[packadd packer.nvim]]
-- Packer plugin manager
require('packer').startup(function(use)
    use 'wbthomason/packer.nvim'  -- Packer can manage itself
    use 'neovim/nvim-lspconfig'  -- Collection of configurations for built-in LSP
    use 'theprimeagen/harpoon'  -- Harpoon for quick navigation
    use 'nvim-lua/plenary.nvim'  -- Required dependency for Harpoon
    
    -- Python support
    use 'sheerun/vim-polyglot'  -- Better syntax highlighting for many languages including Python
    use 'nvim-treesitter/nvim-treesitter'  -- Treesitter for better syntax highlighting
    use 'hrsh7th/nvim-cmp'  -- Completion plugin
    use 'hrsh7th/cmp-nvim-lsp'  -- LSP source for nvim-cmp
    use 'hrsh7th/cmp-buffer'  -- Buffer source for nvim-cmp
    use 'hrsh7th/cmp-path'  -- Path source for nvim-cmp
    use 'L3MON4D3/LuaSnip'  -- Snippet engine
    use 'saadparwaiz1/cmp_luasnip'  -- Luasnip source for nvim-cmp
    use 'rafamadriz/friendly-snippets'  -- Collection of snippets including Python
    
    -- Python debugging
    use 'mfussenegger/nvim-dap'  -- Debug Adapter Protocol client
    use 'mfussenegger/nvim-dap-python'  -- Python support for nvim-dap
    use 'rcarriga/nvim-dap-ui'  -- UI for nvim-dap
    
    -- Linting and formatting
    use 'jose-elias-alvarez/null-ls.nvim'  -- Use Neovim as language server
    
    -- Add Rust Analyzer
    use {
        'simrat39/rust-tools.nvim',
        config = function()
            require('rust-tools').setup({
                tools = {
                    autoSetHints = true,
                    inlay_hints = {
                        highlight = "SpecialComment",
                        prefix = "âž¤ ",
                        enabled = true,
                    },
                },
                server = {
                    on_attach = function(_, bufnr)
                        local opts = { noremap=true, silent=true }
                        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<Leader>rn', ':RustRunnables<CR>', opts)
                        vim.api.nvim_buf_set_keymap(bufnr, 'n', '<Leader>ha', ':RustHoverActions<CR>', opts)
                    end,
                },
            })
        end,
    }
    if packer_bootstrap then
        require('packer').sync()
    end
end)

-- Set leader key and options
vim.g.mapleader = " "
vim.opt.number = true

-- Python specific settings
vim.opt.expandtab = true
vim.opt.shiftwidth = 4
vim.opt.tabstop = 4
vim.opt.softtabstop = 4
vim.opt.autoindent = true
vim.opt.fileformat = 'unix'

-- LSP configuration
local lspconfig = require('lspconfig')

-- Setup Python LSP (pyright)
lspconfig.pyright.setup {
    settings = {
        python = {
            analysis = {
                autoSearchPaths = true,
                diagnosticMode = "workspace",
                useLibraryCodeForTypes = true
            }
        }
    }
}

-- Setup nvim-cmp
local cmp = require('cmp')
local luasnip = require('luasnip')

-- Load snippets
require('luasnip.loaders.from_vscode').lazy_load()

cmp.setup({
    snippet = {
        expand = function(args)
            luasnip.lsp_expand(args.body)
        end,
    },
    mapping = cmp.mapping.preset.insert({
        ['<C-d>'] = cmp.mapping.scroll_docs(-4),
        ['<C-f>'] = cmp.mapping.scroll_docs(4),
        ['<C-Space>'] = cmp.mapping.complete(),
        ['<CR>'] = cmp.mapping.confirm({ select = true }),
        ['<Tab>'] = cmp.mapping(function(fallback)
            if cmp.visible() then
                cmp.select_next_item()
            elseif luasnip.expand_or_jumpable() then
                luasnip.expand_or_jump()
            else
                fallback()
            end
        end, { 'i', 's' }),
        ['<S-Tab>'] = cmp.mapping(function(fallback)
            if cmp.visible() then
                cmp.select_prev_item()
            elseif luasnip.jumpable(-1) then
                luasnip.jump(-1)
            else
                fallback()
            end
        end, { 'i', 's' }),
    }),
    sources = cmp.config.sources({
        { name = 'nvim_lsp' },
        { name = 'luasnip' },
        { name = 'buffer' },
        { name = 'path' }
    })
})

-- Setup Treesitter
require('nvim-treesitter.configs').setup {
    ensure_installed = { "python", "lua" },
    highlight = {
        enable = true,
    },
}

-- Setup DAP for Python debugging
require('dap-python').setup('python')  -- Use python from PATH
local dap, dapui = require('dap'), require('dapui')
dapui.setup()

-- DAP UI integration
dap.listeners.after.event_initialized["dapui_config"] = function()
    dapui.open()
end
dap.listeners.before.event_terminated["dapui_config"] = function()
    dapui.close()
end
dap.listeners.before.event_exited["dapui_config"] = function()
    dapui.close()
end

-- Setup null-ls for linting and formatting
local null_ls = require('null-ls')
null_ls.setup({
    sources = {
        null_ls.builtins.formatting.black,
        null_ls.builtins.formatting.isort,
        null_ls.builtins.diagnostics.flake8,
    },
})

-- Python keybindings
vim.api.nvim_set_keymap('n', '<Leader>py', ':!python %<CR>', { noremap = true })
vim.api.nvim_set_keymap('n', '<Leader>db', ':lua require("dap").toggle_breakpoint()<CR>', { noremap = true })
vim.api.nvim_set_keymap('n', '<Leader>dc', ':lua require("dap").continue()<CR>', { noremap = true })
vim.api.nvim_set_keymap('n', '<Leader>do', ':lua require("dap").step_over()<CR>', { noremap = true })
vim.api.nvim_set_keymap('n', '<Leader>di', ':lua require("dap").step_into()<CR>', { noremap = true })
vim.api.nvim_set_keymap('n', '<Leader>du', ':lua require("dapui").toggle()<CR>', { noremap = true })
vim.api.nvim_set_keymap('n', '<Leader>pf', ':lua vim.lsp.buf.format()<CR>', { noremap = true })

-- Keybindings for Harpoon
vim.api.nvim_set_keymap("n", "<Leader>m", ":lua require('harpoon.ui').toggle_quick_menu()<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>a", ":lua require('harpoon.mark').add_file()<CR>", { noremap = true, silent = true })

-- Setup LSP keybindings
vim.api.nvim_create_autocmd('LspAttach', {
    group = vim.api.nvim_create_augroup('UserLspConfig', {}),
    callback = function(ev)
        local opts = { buffer = ev.buf }
        vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, opts)
        vim.keymap.set('n', 'gd', vim.lsp.buf.definition, opts)
        vim.keymap.set('n', 'K', vim.lsp.buf.hover, opts)
        vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, opts)
        vim.keymap.set('n', '<C-k>', vim.lsp.buf.signature_help, opts)
        vim.keymap.set('n', '<Leader>rn', vim.lsp.buf.rename, opts)
        vim.keymap.set('n', '<Leader>ca', vim.lsp.buf.code_action, opts)
        vim.keymap.set('n', 'gr', vim.lsp.buf.references, opts)
    end,
})

-- File Explorer
use {
    'nvim-tree/nvim-tree.lua',
    requires = {
        'nvim-tree/nvim-web-devicons',
    },
    config = function()
        require('nvim-tree').setup()
    end
}

vim.api.nvim_set_keymap('n', '<Leader>e', ':NvimTreeToggle<CR>', { noremap = true, silent = true })
